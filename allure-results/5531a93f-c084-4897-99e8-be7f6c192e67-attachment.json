{
  "script": "\n            function webdriverioPolyfill() {\n  var __defProp = Object.defineProperty;\n  var __name = function(target, _value) {\n    return __defProp(target, \"name\", { value: _value, configurable: true });\n  };\n  var __globalThis = typeof globalThis === \"object\" && globalThis || typeof window === \"object\" && window;\n  __globalThis.__name = __name;\n}\n            webdriverioPolyfill()\n            return (function getScreenDimensions(isMobile) {\n    // We need to determine if the screen is emulated, because that would return different values\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const dpr = window.devicePixelRatio || 1;\n    const minEdge = Math.min(width, height);\n    const maxEdge = Math.max(width, height);\n    const isLikelyEmulated = !isMobile && // Only check for emulated on desktop\n        dpr >= 2 && // High-DPI signal\n        minEdge <= 800 && // Catch phones/tablets in portrait/landscape\n        maxEdge <= 1280 && // Conservative max for emulated tablet sizes\n        width > 0 && height > 0; // Sanity check\n    // Other checks\n    const body = document.body;\n    const html = document.documentElement;\n    const bodyDimensions = {\n        // On mobile & desktop: Total scrollable height of the body element, including content not visible on screen\n        scrollHeight: !body ? 0 : body.scrollHeight,\n        // On mobile & desktop: Height of body element including padding but not margin\n        offsetHeight: !body ? 0 : body.offsetHeight,\n    };\n    const htmlDimensions = {\n        /** On mobile & desktop: Viewport height excluding scrollbars */\n        clientHeight: !html ? 0 : html.clientHeight,\n        /** On mobile & desktop: Viewport width excluding scrollbars */\n        clientWidth: !html ? 0 : html.clientWidth,\n        /** On mobile & desktop: Total scrollable height including overflow */\n        scrollHeight: !html ? 0 : html.scrollHeight,\n        /** On mobile & desktop: Total scrollable width including overflow */\n        scrollWidth: !html ? 0 : html.scrollWidth,\n        /** On mobile & desktop: Height including padding and border */\n        offsetHeight: !html ? 0 : html.offsetHeight,\n    };\n    const windowDimensions = {\n        /**\n         * Mobile: Viewport width (changes with zoom)\n         * Desktop: Viewport width including scrollbars\n         */\n        innerWidth: window.innerWidth,\n        /**\n         * Mobile: Viewport height (changes with zoom)\n         * Desktop: Viewport height including scrollbars\n         */\n        innerHeight: window.innerHeight,\n        /**\n         * Mobile: True if device is in landscape orientation\n         * Desktop: Based on viewport aspect ratio\n         */\n        isLandscape: window.matchMedia('(orientation: landscape)').matches,\n        /**\n         * Mobile: Full browser height including UI elements\n         * Desktop: Browser window height including toolbars/status bar\n         * Emulated: It will be the same as window.innerHeight\n         */\n        outerHeight: isLikelyEmulated && window.outerHeight > 0 ?\n            window.innerHeight :\n            window.outerHeight === 0 ?\n                htmlDimensions.clientHeight :\n                window.outerHeight,\n        /**\n         * Mobile: Full browser width\n         * Desktop: Browser window width\n         * Emulated: It will be the same as window.innerWidth\n         */\n        outerWidth: isLikelyEmulated && window.outerWidth > 0 ?\n            window.innerWidth :\n            window.outerWidth === 0 ?\n                htmlDimensions.clientWidth :\n                window.outerWidth,\n        /**\n         * Mobile: Physical pixel ratio (typically >1 for high DPI)\n         * Desktop: Usually 1, or 2 for high DPI displays\n         */\n        devicePixelRatio: dpr,\n        /**\n         * Mobile: Always false\n         * Desktop: Always false\n         * Emulated: Always true\n         */\n        isEmulated: isLikelyEmulated,\n        /**\n         * Mobile: Physical screen width in CSS pixels\n         * Desktop: Monitor width in pixels\n         * Emulated: It will be the same as window.innerWidth\n         */\n        screenWidth: isLikelyEmulated ? window.innerWidth : window.screen.width,\n        /**\n         * Mobile: Physical screen height in CSS pixels\n         * Desktop: Monitor height in pixels\n         * Emulated: It will be the same as window.innerHeight\n         */\n        screenHeight: isLikelyEmulated ? window.innerHeight : window.screen.height,\n    };\n    return {\n        dimensions: {\n            body: bodyDimensions,\n            html: htmlDimensions,\n            window: windowDimensions,\n        },\n    };\n}).apply(null, arguments)\n        ",
  "args": [
    true
  ]
}